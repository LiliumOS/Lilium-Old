name: Linux PhantomOS Tools

on:
  schedule:
  - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  build_tools:
    runs-on: ubuntu-latest
    steps:
    - name: Create tools directory
      run: |
        mkdir -p ${{runner.workspace}}/tools/local/{bin,lib,include,share}
        echo '${{runner.workspace}}/tools/local/bin' > $GITHUB_PATH
    - name: Checkout binutils
      working-directory: ${{runner.workspace}}/tools
      run: |
        git clone --depth 1 https://github.com/PhantomOS/binutils-gdb
        mkdir -pv ${{runner.workspace}}/tools/binutils-gdb/build/x86_64-pc-phantom-kernel
      shell: bash
    - name: Checkout gcc 
      working-directory: ${{runner.workspace}}/tools
      run: |
        git clone --depth 1 https://github.com/PhantomOS/gcc.git
        curl https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.xz | tar -Jx
        mv -v gmp-6.2.1 gcc/gmp
        curl https://ftp.gnu.org/gnu/mpfr/mpfr-4.1.0.tar.xz | tar -Jx
        mv -v mpfr-4.1.0 gcc/mpfr
        curl https://ftp.gnu.org/gnu/mpc/mpc-1.2.1.tar.gz | tar -zx
        mv -v mpc-1.2.1 gcc/mpc
        mkdir -p ${{runner.workspace}}/tools/gcc/build/x86_64-pc-phantom-kernel
      shell: bash
    - name: Checkout llvm-project
      run: |
        git clone --depth 1 https://github.com/PhantomOS/llvm-project.git ${{runner.workspace}}/tools/llvm-project
      shell: bash
    - name: Compute Check Hashes
      id: hashes
      run: |
        cd ${{runner.workspace}}/tools/gcc
        gcc_hash=$(git show-ref --hash HEAD)
        cd ${{runner.workspace}}/tools/binutils-gdb
        binutils_hash=$(git show-ref --hash HEAD)
        cd ${{runner.workspace}}/tools/binutils-gdb
        llvm_hash=$(git show-ref --hash HEAD)
        echo "::set-output name=hash::$(echo $gcc_hash $binutils_hash $llvm_hash | sha256sum)"
    - name: Cache tools
      id: tools
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/tools/local
        key: ${{runner.os}}-phantomos-tools-${{steps.hashes.outputs.hash}}
        restore-keys: ${{runner.os}}-phantomos-tools-
    - name: Install tool dependencies
      if: steps.tools.outputs.cache-hit != 'true'
      run: |
        sudo apt install bison texinfo ninja-build
      shell: bash
    - name: Build x86_64-pc-elf cross binutils
      working-directory: ${{runner.workspace}}/tools/binutils-gdb/build/x86_64-pc-phantom-kernel
      if: steps.tools.outputs.cache-hit != 'true'
      run: |
        CFLAGS="-O3" ${{runner.workspace}}/tools/binutils-gdb/configure --prefix=${{runner.workspace}}/tools/local --with-sysroot --enable-gold=default --target=x86_64-pc-phantom-kernel
        make -j8
        make install-strip
      shell: bash       
    - name: Build x86_64-pc-elf gcc
      working-directory: ${{runner.workspace}}/tools/gcc/build/x86_64-pc-phantom-kernel
      if: steps.tools.outputs.cache-hit != 'true'
      run: |
        CFLAGS="-O3" ${{runner.workspace}}/tools/gcc/configure --prefix=${{runner.workspace}}/tools/local --without-headers --target=x86_64-pc-phantom-kernel --enable-languages=c,c++ --disable-shared --disable-decimal-float --disable-threads --disable-libatomic --disable-libgomp --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-newlib
        make -j8
        make install-strip
      shell: bash
    - name: Build llvm-project
      if: steps.tools.outputs.cache-hit != 'true'
      uses: LightningCreations/action-cmake-build@v1.2
      with:
        source-dir: ${{runner.workspace}}/tools/llvm-project/llvm
        build-dir: ${{runner.workspace}}/tools/llvm-project/build-x86_64-pc-phantom-kernel
        configure-options: -GNinja -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/tools/local -DLLVM_ENABLE_PROJECTS="clang;lld" 
        build-type: Release
        install-build: true
        install-options: --strip
    - name: After build llvm-project
      run: |
        ls ${{runner.workspace}}/tools/local/bin/
        ln -sf ${{runner.workspace}}/tools/local/bin/ld.lld ${{runner.workspace}}/tools/local/bin/x86_64-pc-phantom-kernel-ld.lld
        ln -sf ${{runner.workspace}}/tools/local/bin/ld.lld ${{runner.workspace}}/tools/local/x86_64-pc-phantom-kernel/bin/ld.lld